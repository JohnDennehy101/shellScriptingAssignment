#!/bin/bash

#Author: John Dennehy (20091408)

#The purpose of this script is to allow users to remove all of a contacts information from the system based on a particular contacts name or alias.

#Reads input from the user on the name of the user that they wish to remove
printf "\nPlease enter the name of the user that you wish to remove\n"
read -p "Name: " userName

#Bash variable count declared to store the count of matches found for lines that start with the entered name.
#Case insensitive grep is piped to word count which is then piped to the cut command with delimiter of space
count=$( grep -i "^$userName" ContactDetails | wc -l | cut -f1 -d' ')

#If count is not equal to 0, a partial match was found in the ContactDetails file
if [[ "$count" != "0" ]];
    
    then
    
    #Case insensitive grep used to search ContactDetails for the matches. This is piped to awk so that it can be printed to the screen
    printf "\n"
    grep -i "^$userName" ContactDetails | awk -F"|" '{printf "%10s %20s %10s %50s %10s %10s %10s %10s\n", "Name:", $1,"Address: ",$2," Mobile Number: ",$3,"Email: ", $4}'
    
    #User is prompted to select an option
    #1 allows them to delete an individual result
    #2 allows them to delete all results that match from their search
    #3 allows them to return to the main menu
    printf "\n\n1. Delete an individual result.\n2. Delete all results\n3. Back to Main Menu\n\n"
    read -p "Menu Option: " recordToDelete

    #Until loop in place to ensure that the user enters valid input (1,2, or 3)
    until [[ "$recordToDelete" =~ ^[1-3]{1,1}+$ ]]
        do
	    printf "\nInvalid Input\n"
        read -p "Please enter 1, 2, or 3 to select a valid option: " recordToDelete
    done; 

#If count is equal to 0, no partial matches were found in the ContactDetails file
elif [[ "$count" == "0" ]];
    then
    
    #The user is informed that no matches were found for the inputted text
    printf "\nNo person found with that name.\nPlease select one of the following options:\n1. Search again for user to remove\n2. Back to Main Menu\n"
    
    #The user is prompted to select a submenu option
    #1 to search again for a user
    #2 to return to the main menu
    read -p "Menu Option: " noMatchFoundNextStep

    #An until loop is used to ensure that the user selects a valid option (1 or 2). They are repeatedly prompted until they enter a valid option
    until [[ "$noMatchFoundNextStep" =~ ^[1-2]{1,1}+$ ]]
        do
	    printf "\nInvalid Input\n"
        read -p  "Please enter 1 or 2 to proceed: " noMatchFoundNextStep
    done;

    #If the user has entered 1 (to search again for a user(s) to remove)
    if [[ "$noMatchFoundNextStep" == "1" ]]
        then
        #The remove file is run again to allow the user to search for a user(s) to remove
        bash ./Remove
        exit;
    #If the user has entered 2 (to return to the main menu)
    elif [[ "$noMatchFoundNextStep" == "2" ]]
        then
        #The Menu file is executed to bring the user back to the main menu
        bash ./Menu
        exit;
    fi;
fi;

#If the user has selected to delete an individual result 
if [[ "$recordToDelete" == "1" ]]
    then
    
    #Detailed case insensitive grep completed for lines that start with the characters inputted by the user. Outputted to the console
    printf "\n"
    grep -i -n "^$userName" ContactDetails | awk -F"|" '{printf "%18s %15s %50s %10s %10s %10s 10s\n", $1,"Address:",$2,"Phone Number:",$3,"Email:",$4}'
    printf "\n"
    
    #Detailed case insensitive grep for user input piped to awk (delimiter :) where the line numbers are redirected to resultLineNumbers
    grep -i -n "^$userName" ContactDetails | awk -F":" '{print $1}' > resultLineNumbers
    
    #User is prompted for line number of user that they wish to delete
    printf "\nEnter the line number of the user that you wish to remove\n"
    read -p "Line Number: " lineNumber
    
    #Bash variable declared to check if number inputted by user is valid for search result
    #This is completed by grepping the lineNumber into resultLineNumbers and piping the result to wc
    validLineCheck=$(grep "$lineNumber" resultLineNumbers | wc -l)

    #If validLineCheck is not 0, the user has provided a valid lineNumber as a match was found in resultLineNumbers
    if [[ "$validLineCheck" != "0" ]]
        then
        
        #User is prompted to make sure that they want to remove the user 
        sed -n "$lineNumber"p ContactDetails | awk -F"|" '{print $1, "Address:",$2,"Phone Number:",$3,"Email:",$4}'
	    printf "\nAre you sure that you want to remove this user (Yes/No)\n"
        read -p "Response: " response
        
        #Case statement
        case $response in 
            #If user enters any combination of letters indicating that they want to remove the user
            [yY] | [yY][eE][sS] )
                #Case insensitive sed is used to delete the lineNumber that the user has provided
                sed -i  "$lineNumber"d  ContactDetails
                printf "\nUser deleted\n"
                ;;
                
            #If user enters any combination of letters indicating they do not want to remove the user
            [nN] | [nN][oO] )
                #Message outputted that user was not deleted
                printf "\nUser was not deleted\n"
                ;;
            * )
                #Default for case statement for any other input is to echo that user was not deleted
                printf "\nUser was deleted\n"
                ;;
        esac
        

    #If validLineCheck is 0, the user has not provided a valid linenumber as a match was not found in resultLineNumbers
    elif [[ "$validLineCheck" == "0" ]]
        then
        
        #A message is outputted to the user informing them that they have not provided a valid line number.
        printf "\nIncorrect line number inputted. No user has been deleted.\n"
        
    fi;

#If the user has selected to delete all partial matches for the name inputted
elif [[ "$recordToDelete" == "2" ]]
    then
    
    #Case insensitive grep used with awk to display all matches to the screen for the user
    grep -i "^$userName" ContactDetails | awk -F"|" '{printf "%10s %20s %10s %50s %10s %10s %10s %10s\n", "Name:", $1, "Address:",$2,"Phone Number:",$3,"Email:",$4}'
    printf "\n"
    
    #Final check to make sure that the user wants to delete all partial matches
    read -p "Are you sure that you want to remove all of these users? - " response

    #Case statement
    case $response in 
        #If user enters any combination of letters indicating that they want to remove all partial matches
        [yY] | [yY][eE][sS] )
        
            #Case insensitive sed is used to delete all lines with names that partially match name inputted
            sed -i  /^$userName/Id  ContactDetails
            ;;
            
        #If user enters any combination of letters indicating they do not want to remove all matches
        [nN] | [nN][oO] )
            #Message outputted that users were not deleted
            printf "\nUsers were not deleted\n"   
            ;;
    esac



#If the user has entered 3 (to return to main menu)
elif [[ "$recordToDelete" == "3" ]]
    then
    #Menu script is executed to display the main menu to the user
    bash ./Menu
    exit 
fi;


#Message outputted to user that action has been completed. Submenu displayed to user
printf "\n\nAction completed.\nPlease choose one of the following options to proceed:\n1. Remove another member\n2. Return to Main Menu\n\n"

#Input sought from user
read -p "Menu Option: " mainMenuDecision

#Until loop in place to make sure that user provides valid input (1 to remove another user, 2 to return to Main Menu)
until [[ "$mainMenuDecision" =~ ^[1-2]{1,1}+$ ]]
    do
    printf "\nInvalid Input\n"
    read -p "Please enter 1 or 2 to select a valid option: " mainMenuDecision
done;

#If user entered 2 (to remove another user)
if [[ "$mainMenuDecision" == "2" ]]; then
    #Menu script is executed to display main menu to the user
    bash ./Menu
    exit

#If the user entered 1 (to return to main menu)
elif [[ "$mainMenuDecision" == "1" ]]; then
    #remove script is executed to allow user to remove more contacts
    bash ./Remove
    exit
fi;
